generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Attachment {
  id          String   @id
  name        String
  url         String
  description String?
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Category {
  id     String   @id
  name   String
  Course Course[]
}

model Course {
  id          String        @id
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean       @default(false)
  categoryId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Attachment  Attachment[]
  Category    Category?     @relation(fields: [categoryId], references: [id])
  Section     Section[]
  Transaction Transaction[]

  @@index([categoryId])
}

model MuxData {
  id         String  @id
  assetId    String
  playbackId String?
  sectionId  String  @unique
  Section    Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Section {
  id           String         @id
  title        String
  videoUrl     String?
  description  String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  MuxData      MuxData?
  Course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  UserProgress UserProgress[]

  @@index([courseId])
}

model StripeCustomer {
  id               String   @id
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime
}

model Transaction {
  id        String   @id
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model User {
  id            String    @id
  firstName     String?
  lastName      String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  Account       Account[]
}

model UserProgress {
  id          String   @id
  userId      String
  isCompleted Boolean  @default(false)
  sectionId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([userId, sectionId])
  @@index([sectionId])
}

enum Role {
  USER
  ADMIN
}
